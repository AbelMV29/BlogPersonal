@using BlogPersonal.Models.View
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Publicaciones";
    var itemListOrder = new List<SelectListItem>()
    {
        new SelectListItem{
            Text = "Más antiguo",
            Value = "desc",
        },
        new SelectListItem
        {
            Text = "Más reciente",
            Value = "asc"
        }
    };

    var itemListCategory = new List<SelectListItem>()
            {   new SelectListItem()
                {
                    Text = "Todos",
                    Value = "Todos"
                },
                new SelectListItem()
                {
                    Text = "Tecnologia",
                    Value = "Tecnologia"
                },
                new SelectListItem
                {
                    Text = "Entrenamiento",
                    Value = "Entrenamiento"
                }
            };
}
@model List<ShortPostViewModel>
<div class="py-[30px] gap-[15px] mx-4 flex flex-col lg:mx-[60px] 2xl:mx-[300px]">
    <h2 class="inter-bold text-[60px] text-white">Publicaciones</h2>
    <form class="gap-[20px] flex w-full flex-row flex-wrap" id="formQuery">
        <input name="name" type="text" class="text-[14px] px-[10px] py-[6px] border-2 bg-[var(--secondary-body-color)] rounded-[6px] border-white text-gray-400" placeholder="Titulo.." />
        <select name="order" class="text-[14px] px-[10px] py-[6px] border-2 bg-[var(--secondary-body-color)] rounded-[6px] border-white text-gray-400" asp-items="itemListOrder"></select>
        <select name="category" class="text-[14px] px-[10px] py-[6px] border-2 bg-[var(--secondary-body-color)] rounded-[6px] border-white text-gray-400" asp-items="itemListCategory"></select>
        <button type="submit" class="bg-[var(--primary-color)] p-[15px] rounded-[6px]"><i class="fa-solid fa-magnifying-glass text-white"></i></button>
    </form>
    <div class="gap-[15px] py-[10px] flex flex-wrap" id="contentPosts">
    </div>
</div>
<div id="pagination" class="my-[20px] gap-[10px] flex justify-center">
</div>

<script>
    function updatePagination(currentPage, totalPages) {
        const paginationElement = document.getElementById('pagination');
        paginationElement.innerHTML = '';

        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.textContent = i;
            if (i === currentPage) {
                pageButton.classList.add('bg-[var(--primary-color)]', 'text-white', 'px-[10px]', 'py-[6px]', 'border-2', 'rounded-[6px]', 'border-white', 'text-gray-400');
            }
            else
            {
                pageButton.classList.add('px-[10px]', 'py-[6px]', 'border-2', 'bg-[var(--secondary-body-color)]', 'rounded-[6px]', 'border-white', 'text-gray-400');
            }

            

            pageButton.addEventListener('click', function () {
                submitForm(i);
            });

            paginationElement.appendChild(pageButton);
        }
    }

    function submitForm(page = 1) {
        let myForm = document.getElementById('formQuery');
        let object = {
            name: document.getElementsByName('name')[0].value,
            order: document.getElementsByName('order')[0].value,
            category: document.getElementsByName('category')[0].value
        }
        let queryString = `name=${encodeURIComponent(object.name)}&order=${encodeURIComponent(object.order)}&category=${encodeURIComponent(object.category)}&page=${page}`;
        fetch('/postsQuery?' + queryString)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                const element = document.getElementById('contentPosts');
                element.innerHTML = ''
                if (data.list.length === 0) {
                    element.innerHTML = `<p class="text-[var(--primary-color)] inter-bold">Sin resultados</p>`;
                } else {
                    data.list.forEach((e) => {
                        element.innerHTML += `<div class="min-w-[300px] max-w-[400px] flex flex-col lg:min-w-[400px]">
                                <img src="${e.previewImage}" />
                            <div class="gap-[15px] bg-[var(--secondary-body-color)] p-[15px] rounded-b-[6px] flex flex-col">
                                <a href="post/${e.id}" class="inter-bold text-[24px] text-[var(--primary-color)]"> ${e.title}</a>
                                <p class="inter-medium text-[14px] text-white"> ${e.shortDescription} </p>
                                <div class="flex w-full flex-row justify-between">
                                    <a href="/post/${e.id}" class="text-[var(--primary-color)] inter-bold">Ver</a>
                                    <p class="text-[var(--link-color)] inter-bold"> ${e.publishDate}</p>
                                </div>
                            </div>
                        </div>`;
                    });
                }
                updatePagination(data.currentPage, data.totalPages);
            })
            .catch(error => console.log(error));
    }

    document.getElementById('formQuery').addEventListener('submit', function (event) {
        event.preventDefault();
        submitForm(1);
    });

    // Load initial posts with default page 1
    submitForm(1);
</script>